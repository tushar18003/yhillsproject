import java.util.*;


enum Suit {
    SPADE, CLUB, HEART, DIAMOND
}

enum Rank {
    ACE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, JACK, QUEEN, KING
}

class Card {
    private final Suit suit;
    private final Rank rank;

    public Card(Suit suit, Rank rank) {
        this.suit = suit;
        this.rank = rank;
    }

    public Suit getSuit() {
        return suit;
    }

    public Rank getRank() {
        return rank;
    }

    @Override
    public String toString() {
        return rank + " of " + suit;
    }
}

class Deck {
    private final List<Card> cards;

    public Deck() {
        cards = new ArrayList<>();
        for (Suit suit : EnumSet.allOf(Suit.class)) {
            for (Rank rank : EnumSet.allOf(Rank.class)) {
                cards.add(new Card(suit, rank));
            }
        }
    }

    public void shuffle() {
        Collections.shuffle(cards);
    }

    public Card draw() {
        if (cards.isEmpty()) {
            throw new IllegalStateException("Deck is empty");
        }
        return cards.remove(cards.size() - 1);
    }

    public List<Card> draw(int count) {
        List<Card> drawnCards = new ArrayList<>();
        for (int i = 0; i < count; i++) {
            drawnCards.add(draw());
        }
        return drawnCards;
    }

    public int size() {
        return cards.size();
    }
}

class CardComparator implements java.util.Comparator<Card> {
    @Override
    public int compare(Card card1, Card card2) {
        // First, compare based on color
        int colorComparison = getColorValue(card1.getSuit()) - getColorValue(card2.getSuit());
        if (colorComparison != 0) {
            return colorComparison;
        }
        // If colors are the same, compare based on suit
        int suitComparison = card1.getSuit().compareTo(card2.getSuit());
        if (suitComparison != 0) {
            return suitComparison;
        }
        // If suits are the same, compare based on rank
        return card1.getRank().compareTo(card2.getRank());
    }

    private int getColorValue(Suit suit) {
        if (suit == Suit.HEART || suit == Suit.DIAMOND) {
            return 1; // Red
        } else {
            return 0; // Black
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Deck deck = new Deck();
        deck.shuffle(); // Optional: Shuffle the deck

        // Draw 20 random cards from the deck
        List<Card> drawnCards = deck.draw(20);

        // Sort the drawn cards using custom comparator
        Collections.sort(drawnCards, new CardComparator());

        // Display the sorted drawn cards
        for (Card card : drawnCards) {
            System.out.println(card);
        }
    }
}
